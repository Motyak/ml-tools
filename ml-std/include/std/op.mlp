include <std/cond.mlp>
include <std/loops.mlp>
include <std/Iterator.mlp>
include <std/functional.mlp>

var .. RangeIterator<=

var >> compose

var |> (input, fn):{
    fn(input)
}

var <> (a, b, varargs...):{
    not(==(a, b, varargs...))
}

var < (a, b, varargs...):{
    var otherArgs ArgIterator(b, varargs...)

    var ge $false
    var lhs a
    var rhs next(otherArgs)
    do_until(():{
        var rhs' some(rhs)
        tern(lhs > rhs' || lhs == rhs', {ge := $true}, {
            lhs := rhs'
            rhs := next(otherArgs)
        })
    }, ():{ge || none?(rhs)})

    not(ge)
}

var <= (a, b, varargs...):{
    var otherArgs ArgIterator(b, varargs...)

    var gt $false
    var lhs a
    var rhs next(otherArgs)
    do_until(():{
        var rhs' some(rhs)
        tern(lhs > rhs', {gt := $true}, {
            lhs := rhs'
            rhs := next(otherArgs)
        })
    }, ():{gt || none?(rhs)})

    not(gt)
}

var >= (a, b, varargs...):{
    var otherArgs ArgIterator(b, varargs...)

    var lt $false
    var lhs a
    var rhs next(otherArgs)
    do_until(():{
        var rhs' some(rhs)
        !tern(lhs > rhs' || lhs == rhs', {lt := $true}, {
            lhs := rhs'
            rhs := next(otherArgs)
        })
    }, ():{lt || none?(rhs)})

    not(lt)
}

var - {
    var neg (x):{
        x + x * -2
    }

    var sub (a, b, varargs...):{
        var otherArgs ArgIterator(b, varargs...)

        var lhs a
        var rhs next(otherArgs)
        do_until(():{
            var rhs' some(rhs)
            lhs := lhs + neg(rhs')
            rhs := next(otherArgs)
        }, ():{none?(rhs)})

        lhs
    }

    var - (x, xs...):{
        tern($#varargs == 0, neg(x), {
            sub(x, xs...)
        })
    }

    -
}

var in (elem, iterable):{
    var in (elem, container):{
        var i 1
        var found $false
        until(():{found || i > len(container)}, ():{
            found ||= container[#i] == elem
            i += 1
        })
        found
    }

    var Iterator::in (elem, iterator):{
        var found $false
        var curr next(iterator)
        until(():{found || none?(curr)}, ():{
            tern(elem == some(curr), {found := $true}, {
                curr := next(iterator)
            })
        })
        found
    }

    var < (lhs, rhs):{
        not(lhs > rhs || lhs == rhs)
    }
    var lambda? (x):{
        Str(x) == "<lambda>" && len(x) < 8
    }

    !tern(lambda?(iterable), in(elem, iterable), {
        Iterator::in(elem, iterable)
    })
}

var !in (elem, iterable):{
    not(in(elem, iterable))
}

package main

"=== testing sub ==="

-(3)
-(3, 5)
3 - 5
-(1, 2, 3)
1 - 2 - 3


"=== testing <() ==="

<(1, 2, 3)
<(1, 2, 2)
<(1, 2, 1)

"=== testing in op ==="

"d" in "sdf"
"g" in "sdf"

7 in 1 .. 10
11 in 1 .. 10

'f in 'a .. 'z
'F in 'a .. 'z
